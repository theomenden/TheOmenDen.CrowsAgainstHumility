@page "/user/manage"
@using Microsoft.AspNetCore.Authentication
<Container Fluid 
           Background="Background.Dark" 
           TextColor="TextColor.Light"
           Margin="Margin.Is3.FromTop"
           Border="Border.Is2.Secondary.OnAll.Rounded">
    <Row Height="Height.Is100">
        <Column ColumnSize="ColumnSize.IsFull.OnWidescreen">
            <Heading Size="HeadingSize.Is4">Profile</Heading>
        </Column>
        <Column Margin="Margin.Is2.FromTop"
                ColumnSize="ColumnSize.IsFull.IsThird.OnWidescreen.IsThird.OnFullHD">
            <Blazorise.Link To="#" Display="Display.Block" Margin="Margin.Is4.FromBottom">
                <Image Source="@_user?.GetUIImageUrl" Text="@_user?.UserName" Fluid Style="max-width: 200px;" />
            </Blazorise.Link>
            <Button Clicked="ShowProfileImageEditorAsync"
                    Color="Color.Info"
                    Size="Size.Small"
                    Border="Border.Is2.Light.OnAll.Rounded">
                <Icon Name="IconName.Edit">Edit</Icon>
            </Button>
        </Column>
        <Column ColumnSize="ColumnSize.IsFull.Is8.OnWidescreen.Is8.OnFullHD">
            <Field>
                <FieldLabel>Username</FieldLabel>
                <TextEdit Text="@_user?.UserName" ReadOnly>
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </TextEdit>
            </Field>
            <Fields>
                <Field>
                    <FieldLabel>
                        Email
                    </FieldLabel>
                    <TextEdit Text="@_user?.Email" ReadOnly>
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </TextEdit>
                </Field>
            </Fields>
        </Column>
    </Row>
    <Row>
        <Column ColumnSize="ColumnSize.IsFull.Is8.OnWidescreen.Is8.OnFullHD">
            <Div Margin="Margin.Is4.OnTablet">
                @if (_externalProviders.Any())
                {
                    <Buttons ElementId="#btn-animate"
                         Flex="Flex.Row.AlignContent.Between.JustifyContent.Between.Grow.Is1.Shrink.Is1">
                        <Repeater TItem="AuthenticationScheme" Items="_externalProviders">
                            <Animate Anchor="#btn-animate"
                                 Auto
                                 Animation="Animations.FlipUp"
                                 DelayMilliseconds="500">
                                <Button Color="Color.Primary"
                                    Border="Border.Rounded"
                                    Shadow="Shadow.Default"
                                    Margin="Margin.Is2.OnX"
                                    Outline
                                    Clicked="@(async () => await OnExternalLoginAsync(context))">
                                    <Span Class="visually-hidden">
                                        @context.DisplayName
                                    </Span>
                                    <Small>
                                        Link with your @context.DisplayName
                                    </Small>
                                    @switch (context.DisplayName)
                                    {
                                        case var pn when String.Equals(pn, "twitch", StringComparison.OrdinalIgnoreCase):
                                            <Icon Name="@("bi bi-twitch")" Class="text-light display-3" />
                                            break;
                                        case var pn when String.Equals(pn, "twitter", StringComparison.OrdinalIgnoreCase):
                                            <Icon Name="@("bi bi-twitter")" Class="text-light display-3" Shadow="Shadow.Small" />
                                            break;
                                        case var pn when String.Equals(pn, "discord", StringComparison.OrdinalIgnoreCase):
                                            <Icon Name="@("bi bi-discord")" Class="text-light display-3" Shadow="Shadow.Small" />
                                            break;
                                        case var pn when String.Equals(pn, "Microsoft", StringComparison.OrdinalIgnoreCase):
                                            <Icon Name="@("bi bi-microsoft")" Class="text-light display-3" />
                                            break;
                                    }
                                </Button>
                            </Animate>
                        </Repeater>
                    </Buttons>
                }
            </Div>
        </Column>
    </Row>
</Container>
<Modal @ref="_modalRef">
    <ModalContent>
        <ModalHeader Background="Background.Dark">
            <ModalTitle TextColor="TextColor.Light">Select your Avatar</ModalTitle>
            <CloseButton Background="Background.White"/>
        </ModalHeader>
        <ModalBody Background="Background.Dark">
            <AvatarSelector @bind-SelectedImageUrl="_avatarImageSelectorUrl" />
        </ModalBody>
        <ModalFooter Background="Background.Dark">
            <Buttons Flex="Flex.JustifyContent.Between">
            <Button Color="Color.Primary" Clicked="SaveProfileImageAsync" Margin="Margin.Is2.FromEnd"><Icon Name="IconName.Save"/>Save</Button>
            <Button Color="Color.Secondary" Clicked="@_modalRef.Hide">Close</Button>
            </Buttons>
        </ModalFooter>
    </ModalContent>
</Modal>