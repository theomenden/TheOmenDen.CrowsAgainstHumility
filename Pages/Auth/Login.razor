@page "/login"
@using Microsoft.AspNetCore.Authentication
<Row Height="Height.Is100">
    <Column Height="Height.Is100"
            ColumnSize="ColumnSize.Is8.OnTablet.IsHalf.OnDesktop.IsThird.OnWidescreen"
            Margin="Margin.IsAuto.OnX"
            Display="Display.Table">
        <Div Display="Display.Table"
             VerticalAlignment="VerticalAlignment.Middle"
             Margin="Margin.Is2.OnY.OnDesktop.Is3.OnY.OnTablet.Is4.OnY.OnMobile"
             Padding="Padding.Is2.OnY.Is3.OnX">
            <Card Shadow="Shadow.Default"
                  Background="Background.Dark"
                  Border="Border.Is2.Secondary.OnAll.Rounded">
                <CardBody Background="Background.Transparent"
                          TextColor="TextColor.Light">
                    <Text TextAlignment="TextAlignment.Center" Margin="Margin.Is4.FromTop">
                        <Heading Size="HeadingSize.Is2" TextAlignment="TextAlignment.Center">
                            Welcome Back
                        </Heading>
                        <Paragraph TextAlignment="TextAlignment.Center">
                            Sign in to your account to continue
                        </Paragraph>
                    </Text>
                    <Div Margin="Margin.Is4.OnTablet">
                        <Form>
                            <Validations @ref="@_validationsRef" Model="@Input" Mode="ValidationMode.Manual">
                                <Validation>
                                    <Field>
                                        <FieldLabel>Email</FieldLabel>
                                        <TextEdit @bind-Text="@Input.Email"
                                                  Role="TextRole.Email"
                                                  Placeholder="Enter your email">
                                            <Feedback>
                                                <ValidationError />
                                            </Feedback>
                                        </TextEdit>
                                    </Field>
                                </Validation>
                                <Validation>
                                    <Field>
                                        <FieldLabel>Password</FieldLabel>
                                        <FieldBody>
                                            <TextEdit @bind-Text="@Input.Password"
                                                      Role="TextRole.Password"
                                                      Placeholder="Enter your password">
                                                <Feedback>
                                                    <ValidationError />
                                                </Feedback>
                                            </TextEdit>
                                        </FieldBody>
                                    </Field>
                                </Validation>
                                <Field>
                                    <Row>
                                        <Column>
                                            <Check TValue="bool" @bind-Checked="@Input.IsRemembered">Remember Me?</Check>
                                        </Column>
                                        <Column TextAlignment="TextAlignment.End">
                                            <Blazorise.Link To="forgot-password">Forgot Password?</Blazorise.Link>
                                        </Column>
                                    </Row>
                                </Field>
                                <Field>
                                    <Button Type="ButtonType.Submit"
                                            PreventDefaultOnSubmit Color="Color.Primary"
                                            Block
                                            Clicked="@OnLoginAsync">
                                        <Icon Name="IconName.UserCheck" />
                                        Login
                                    </Button>
                                </Field>
                            </Validations>
                            <input type="hidden" name="__RequestVerificationToken" value="@TokenProvider.XSRFToken" />
                        </Form>
                    </Div>
                </CardBody>
            </Card>
            @if (HasErrors)
            {
                <Row Margin="Margin.Is3.FromTop">
                    <Column ColumnSize="ColumnSize.Is12">
                        <Alert Color="Color.Danger" Margin="Margin.Is3.FromTop" Visible>
                            <AlertMessage>Invalid Email or Password</AlertMessage>
                        </Alert>
                    </Column>
                </Row>
            }
            <Row Margin="Margin.Is3.FromTop"
                 Background="Background.Dark"
                 TextColor="TextColor.Light"
                 Border="Border.Is2.Secondary.OnAll.Rounded"
                 Shadow="Shadow.Small">
                <Column ColumnSize="ColumnSize.Is12">
                    <Paragraph TextColor="TextColor.Muted" TextAlignment="TextAlignment.Center">
                        Don't have an account?
                        <Blazorise.Link To="register"
                                        TextColor="TextColor.Warning"
                                        Class="text-decoration-underline">Register</Blazorise.Link>
                    </Paragraph>
                </Column>
            </Row>
        </Div>
    </Column>
    <Column Height="Height.Is100"
            ColumnSize="ColumnSize.IsThird.OnTablet.IsHalf.OnDesktop.Is8.OnWidescreen"
            Margin="Margin.IsAuto.OnX"
            Display="Display.Table">
        <Div Display="Display.Table"
             VerticalAlignment="VerticalAlignment.Middle"
             Margin="Margin.Is2.OnY.OnDesktop.Is3.OnY.OnTablet.Is4.OnY.OnMobile"
             Padding="Padding.Is2.OnY.Is3.OnX">
            <Card Shadow="Shadow.Default"
                  Background="Background.Dark"
                  Border="Border.Is2.Secondary.OnAll.Rounded">
                <CardBody Background="Background.Transparent"
                          TextColor="TextColor.Light">
                    <Text TextAlignment="TextAlignment.Center" Margin="Margin.Is4.FromTop">
                        <Heading Size="HeadingSize.Is2" TextAlignment="TextAlignment.Center">
                        </Heading>
                        Sign in with another one of our supported providers
                    </Text>
                    <Div Margin="Margin.Is4.OnTablet">
                        @if (_externalProviders.Any())
                        {
                            <Buttons ElementId="#btn-animate">
                                <Repeater TItem="AuthenticationScheme" Items="_externalProviders">
                                    <Animate Anchor="#btn-animate"
                                         Auto
                                         Animation="Animations.FlipUp"
                                         DelayMilliseconds="500">
                                        <Button Color="Color.Primary"
                                            Border="Border.Rounded"
                                            Shadow="Shadow.Default"
                                            Margin="Margin.Is2.OnX"
                                            Padding="Padding.Is4.OnX"
                                            Outline
                                            Clicked="@(async () => await OnExternalLoginAsync(context))">
                                            <Span Class="visually-hidden">
                                                @context.DisplayName
                                            </Span>
                                            <Small>
                                                Log in using your @context.DisplayName account
                                            </Small>
                                            @switch (context.DisplayName)
                                            {
                                                case var pn when String.Equals(pn, "twitch", StringComparison.OrdinalIgnoreCase):
                                                    <Icon Name="@("bi bi-twitch")" Class="text-light display-3" />
                                                    break;
                                                case var pn when String.Equals(pn, "twitter", StringComparison.OrdinalIgnoreCase):
                                                    <Icon Name="@("bi bi-twitter")" Class="text-light display-3" />
                                                    break;
                                                case var pn when String.Equals(pn, "discord", StringComparison.OrdinalIgnoreCase):
                                                    <Icon Name="@("bi bi-discord")" Class="text-light display-3" />
                                                    break;
                                            }
                                        </Button>
                                    </Animate>
                                </Repeater>
                            </Buttons>
                        }
                    </Div>
                </CardBody>
            </Card>
        </Div>
    </Column>
</Row>